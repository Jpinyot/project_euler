/* The sequence of triangle numbers is generated by adding the natural numbers. 				*/
/* So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 							*/
/* The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... 						*/
/* Let us list the factors of the first seven triangle numbers: 								*/
/*  1: 1 																						*/
/*  3: 1,3 																						*/
/*  6: 1,2,3,6 																					*/
/* 10: 1,2,5,10 																				*/
/* 15: 1,3,5,15 																				*/
/* 21: 1,3,7,21 																				*/
/* 28: 1,2,4,7,14,28 																			*/
/* We can see that 28 is the first triangle number to have over five divisors. 					*/
/* What is the value of the first triangle number to have over five hundred divisors? 			*/
/* Solution = 76576500 																			*/

#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <list>
#include <vector>
#include <iostream>

long	triangle_number_divisors(int limit)
{
	long	triangle = 0;
	int		div = 1;
	int		root;
	int		tri_pos = 1;
	

	while (div <= limit)
	{
		triangle += tri_pos; 
		div = 0;
		root = sqrt(triangle);
		for (int j = 1; j <= root; j++)
			if (triangle % j == 0)
				div += 2;
		tri_pos++;
		
	}
	return (triangle);
}

char	is_prime(long n)
{
	if (n == 1) return (0);
	if (n < 4) return (1);
	if (n % 2 == 0) return (0);
	if (n < 9) return (1);
	if (n % 3 == 0) return (0);
	int root = pow(n, 0.5) + 1;
	int f = 5;
	while (f < root)
	{
		if (n % f == 0) return (0);
		if (n % (f + 2) == 0) return (0);
		f += 6;
	}
	return (1);
}

long	triangle_number_divisors_opt(int limit)
{
	int		n = 3;
	int		Dn = 2;
	int		cnt = 0;
	int		n1, Dn1, exponent;
	std::list<int>	prime;
	std::list<int>::iterator it;

	for (int i = 2; i < 65500; i++)
		if (is_prime(i))
			prime.push_back(i);
	while (cnt <= limit)
	{
		n++;
		n1 = n;
		if (n1 % 2 == 0) n1 /= 2;
		Dn1 = 1;
		for (it = prime.begin(); it != prime.end(); ++it)
		{
			if (*it * *it > n1)
			{
				Dn1 *= 2;
				break;
			}
			exponent = 1;
			while (n1 % *it == 0)
			{
				exponent++;
				n1 /= *it;
			}
			Dn1 *= exponent;
			if (n1 == 1) break;
		}
		cnt = Dn * Dn1;
		if (cnt < 2)
		printf("%i\n", cnt);
		Dn = Dn1;
	}
  return (n * (n - 1) / 2);
}


int		main(void)
{
	/* long	ans = triangle_number_divisors(500); */
	long	ans = triangle_number_divisors_opt(500);
	printf("%li\n", ans);
	return (0);
}
